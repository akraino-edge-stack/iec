heat_template_version: 2016-10-14

description: "K8 slaves VM"

parameters:
  key_name:
    type: string
    description: management ssh key
    default: 'ak-key'

  k8s_mgmt_net:
    type: string
    description: management network
    default: "k8s_mgmt_net"

  public_ip_pool:
    type: string
    description: Public IP pool
    default: "external"

  k8s_master_ip:
    type: string
    description: k8s_master management IP (fixed)
    default: "192.168.50.100"

  k8s_pod_net:
    type: string
    description: Kubernetes pod network
    default: "k8s_pod_net"

  k8s_pod_net_cidr:
    type: string
    description: k8 pod_net cidr used for setting up k8s cluster
    default: "192.168.50.0/24"

  k8s_svc_net:
    type: string
    description: Kubernetes service network
    default: "k8s_svc_net"

  k8s_svc_net_cidr:
    type: string
    description: k8 pod_net cidr used for setting up k8s cluster
    default: "10.96.0.0/12"

  k8s_cluster_ip:
    type: string
    description: k8 service IP addr used for setting up k8s cluster
    default: "10.96.232.136"

  k8s_user:
    type: string
    description: User id to connect to the VMs (ssh)
    default: "ubuntu"

  k8s_password:
    type: string
    description: Access password for the user to connect to the VMs (ssh)
    default: "ubuntu"

  enable_floating_ip:
    type: boolean
    default: true

  has_dpdk:
    type: boolean
    default: false

  slaves_count:
    type: number
    description: Number of K8 slaves
    default: 2

conditions:
  cond_floating_ip: {equals: [{get_param: enable_floating_ip}, true]}
  has_dpdk: {equals: [{get_param: has_dpdk}, true]}

resources:
  flavor:
    type: OS::Nova::Flavor
    properties:
      ram: 10240
      vcpus: 4
      disk: 10

  flavor_dpdk:
    type: OS::Nova::Flavor
    properties:
      ram: 10240
      vcpus: 4
      disk: 10
      extra_specs:
        "hw:mem_page_size": large
        "hw:cpu_policy": dedicated
        "aggregate_instance_extra_specs:pinned": "true"
        "hw:numa_node.0": 0
        "hw:numa_nodes": 1

  server_cloudinit_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        password: ubuntu
        chpasswd: { expire: false }
        ssh_pwauth: true
        manage_etc_hosts: true
        disable_root: false

  server_config:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: { get_file: k8s_slaves_init.sh }
          params:
            k8s_master_ip: { get_param: k8s_master_ip }
            k8s_pod_net_cidr: { get_param: k8s_pod_net_cidr }
            k8s_svc_net_cidr: { get_param: k8s_svc_net_cidr }
            k8s_cluster_ip: { get_param: k8s_cluster_ip }
            k8s_user: { get_param: k8s_user }
            k8s_password: { get_param: k8s_password }

  server_user_data:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: server_cloudinit_config }
        - config: {get_resource: server_config }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security group for ssh and icmp
      name: test-security-group
      rules: [
        { remote_ip_prefix: 0.0.0.0/0,
          protocol: tcp,
          port_range_min: 1,
          port_range_max: 65535},
        { remote_ip_prefix: 0.0.0.0/0,
          protocol: udp,
          port_range_min: 1,
          port_range_max: 65535},
        { remote_ip_prefix: 0.0.0.0/0, protocol: icmp }
      ]

  slaveresource:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: slaves_count }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: "k8-slave-%index%"
          key_name: { get_param: key_name }
          flavor: { get_resource: {if: ["has_dpdk", "flavor_dpdk", "flavor"]} }
          image: "xenial"
          user_data: { get_resource: server_user_data }
          user_data_format: RAW
          security_groups:
            - { get_resource: server_security_group }
          networks:
            - network: { get_param: k8s_mgmt_net }
            - network: { get_param: k8s_pod_net }
            - network: { get_param: k8s_svc_net }
